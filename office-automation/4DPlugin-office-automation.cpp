/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-office-automation.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : office-automation
 #	author : miyako
 #	2021/05/19
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-office-automation.h"

#pragma mark AppleScript

#if VERSIONMAC
static NSString *sanitizeFileName(NSString *fileName) {
    
    if(fileName) {
        fileName = [fileName stringByReplacingOccurrencesOfString:@":" withString:@"_"];
        NSCharacterSet *illegalFileNameCharacters = [NSCharacterSet characterSetWithCharactersInString:@"/\\?%*|\"<>"];
        return [[fileName componentsSeparatedByCharactersInSet:illegalFileNameCharacters] componentsJoinedByString:@""];
    }
    
    return @"";
}

static id getApp(NSString *bundleIdentifier) {
    
    //prioritise running version of the office app
    
    NSArray *runningApplications = [NSRunningApplication runningApplicationsWithBundleIdentifier:bundleIdentifier];
    
    if([runningApplications count]) {
        
        return [SBApplication applicationWithProcessIdentifier:[[runningApplications objectAtIndex:0]processIdentifier]];
        
    }
    
    return [SBApplication applicationWithBundleIdentifier:bundleIdentifier];
}

static NSURL *copyUrl(NSString *path) {
    
    return (NSURL *)CFURLCreateWithFileSystemPath(kCFAllocatorDefault, (CFStringRef)path, kCFURLHFSPathStyle, false);
}

static NSString *copyPath(NSURL *url) {
    
    return  (NSString *)CFURLCopyFileSystemPath((CFURLRef)url, kCFURLHFSPathStyle);
}

static NSURL *temporaryDirectory() {
    
    NSURL *url = nil;
    
    NSArray *URLs = [[NSFileManager defaultManager]
                                     URLsForDirectory:NSDesktopDirectory
                                     inDomains:NSUserDomainMask];
    
    if(URLs && [URLs count])
    {
        
        url = [[NSFileManager defaultManager]
                     URLForDirectory:NSItemReplacementDirectory
                     inDomain:NSUserDomainMask
                     appropriateForURL:[URLs objectAtIndex:0]
                     create:YES
                     error:nil];
    }
    
    return url;
}
#endif

static bool sb_tell_word_to_open(CUTF8String& _name, CUTF8String& _path,
                                 CUTF8String& _pass1,
                                 CUTF8String& _pass2,
                                 CUTF8String& _pass3,
                                 CUTF8String& _pass4) {
    
    bool success = false;
    
#if VERSIONMAC
    @autoreleasepool {
        
        NSString *name  = [NSString stringWithUTF8String:(const char *)_name .c_str()];
        NSString *path  = [NSString stringWithUTF8String:(const char *)_path .c_str()];
        
        NSString *pass1 = [NSString stringWithUTF8String:(const char *)_pass1.c_str()];
        NSString *pass2 = [NSString stringWithUTF8String:(const char *)_pass2.c_str()];
        NSString *pass3 = [NSString stringWithUTF8String:(const char *)_pass3.c_str()];
        NSString *pass4 = [NSString stringWithUTF8String:(const char *)_pass4.c_str()];
        
        WordApplication *application = getApp(@"com.microsoft.Word");
     
        if(application) {
            
            NSURL *url = copyUrl(path);
            
            [application open:url
                     fileName:name
           confirmConversions:NO // do not display the convert file dialog box if the file is not in Microsoft Word format
                     readOnly:NO
             addToRecentFiles:YES
                       repair:NO // open the file in repair mode
               showingRepairs:NO //suppress showing repairs when opening in repair mode
             passwordDocument:pass1 // password for opening the document
             passwordTemplate:pass2 // password for opening the template
                       revert:NO // activate the document if the file is an open document
                writePassword:pass3 // password for saving changes to the document
        writePasswordTemplate:pass4 // password for saving changes to the template
                fileConverter:WordWdOpenFormatOpenFormatAuto];// open format auto
            
            [url release];
            
            success = true;
        }
    }
#endif
    
    return success;
}

static bool sb_tell_word_to_open(CUTF16String& _name, CUTF16String& _path,
	CUTF16String& _pass1,
	CUTF16String& _pass2,
	CUTF16String& _pass3,
	CUTF16String& _pass4) {

	bool success = false;

#if VERSIONWIN

	HRESULT hr = OleInitialize(NULL);

	if (SUCCEEDED(hr)) {

		COleException e;
		WordApplication wdApp;

		bool isAvailable = false;

		CLSID clsid;
		CLSIDFromProgID(L"Word.Application", &clsid);

		IUnknown *pUnknown;
		HRESULT hr = GetActiveObject(clsid, NULL, (IUnknown**)&pUnknown);
		if (SUCCEEDED(hr)) {
			//there is a running instance
			// Get IDispatch interface for Automation...
			IDispatch *pDispatch;
			hr = pUnknown->QueryInterface(IID_IDispatch, (void **)&pDispatch);
			if (SUCCEEDED(hr)) {
				wdApp.AttachDispatch(pDispatch, TRUE);
				isAvailable = true;
			}
		}
		else {
			if (wdApp.CreateDispatch(L"Word.Application", &e)) {
				isAvailable = true;
			}
		}

		if (isAvailable) {

			wdApp.put_Visible(TRUE);

			WordDocuments documents = wdApp.get_Documents();

			COleVariant vtOptional((long)DISP_E_PARAMNOTFOUND, VT_ERROR), vtFalse((short)FALSE), vtTrue((short)TRUE);

			COleVariant fileName((LPCTSTR)_path.c_str());
			COleVariant passwordDocument((LPCTSTR)_pass1.c_str());
			COleVariant passwordTemplate((LPCTSTR)_pass2.c_str());
			COleVariant writePassword((LPCTSTR)_pass3.c_str());
			COleVariant writePasswordTemplate((LPCTSTR)_pass4.c_str());

			documents.Open(fileName,
				vtFalse, //confirmConversions
				vtFalse, //readOnly
				vtTrue, //addToRecentFiles
				passwordDocument,
				passwordTemplate,
				vtTrue, //revert
				writePassword,
				writePasswordTemplate,
				vtOptional, //format
				vtOptional, //encoding
				vtTrue, //visible
				vtFalse, //repair
				vtOptional, //direction
				vtTrue, //no dialog
				vtOptional);//transoform
				 
			success = true;
		}

		OleUninitialize();
	}
#endif

	return success;
}

static bool sb_tell_excel_to_open(CUTF8String& _path, 
	CUTF8String& _pass1,
	CUTF8String& _pass2) {
    
    bool success = false;
    
#if VERSIONMAC
    @autoreleasepool {
    
        NSString *path  = [NSString stringWithUTF8String:(const char *)_path .c_str()];
        ExcelApplication *application = getApp(@"com.microsoft.Excel");
        
        if(application) {
            
            NSURL *url = copyUrl(path);
            
            [application open:url];
            
            [url release];
            
            success = true;
        }
        
    }
#endif
    
    return success;
}

static bool sb_tell_excel_to_open(CUTF16String& _path,
	CUTF16String& _pass1,
	CUTF16String& _pass2) {

	bool success = false;

#if VERSIONWIN

	HRESULT hr = OleInitialize(NULL);

	if (SUCCEEDED(hr)) {

		COleException e;
		ExcelApplication xlApp;

		bool isAvailable = false;

		CLSID clsid;
		CLSIDFromProgID(L"Excel.Application", &clsid);

		IUnknown *pUnknown;
		HRESULT hr = GetActiveObject(clsid, NULL, (IUnknown**)&pUnknown);
		if (SUCCEEDED(hr)) {
			//there is a running instance
			// Get IDispatch interface for Automation...
			IDispatch *pDispatch;
			hr = pUnknown->QueryInterface(IID_IDispatch, (void **)&pDispatch);
			if (SUCCEEDED(hr)) {
				xlApp.AttachDispatch(pDispatch, TRUE);
				isAvailable = true;
			}
		}
		else {
			if (xlApp.CreateDispatch(L"Excel.Application", &e)) {
				isAvailable = true;
			}
		}

		if (isAvailable) {

			xlApp.put_Visible(TRUE);

			ExcelWorkbooks documents = xlApp.get_Workbooks();

			COleVariant vtOptional((long)DISP_E_PARAMNOTFOUND, VT_ERROR), vtFalse((short)FALSE), vtTrue((short)TRUE);

			COleVariant password((LPCTSTR)_pass1.c_str());
			COleVariant writePassword((LPCTSTR)_pass2.c_str());

			documents.Open((LPCTSTR)_path.c_str(),
				vtOptional,
				vtOptional,
				vtOptional,
				password, 
				writePassword, 
				vtOptional, 
				vtOptional, 
				vtOptional, 
				vtOptional,
				vtOptional,
				vtOptional,
				vtOptional,
				vtOptional,
				vtOptional);

			success = true;
		}

		OleUninitialize();
	}
#endif

	return success;
}

static bool sb_tell_excel_to_close(CUTF8String& _name, CUTF8String& _path) {
    
    bool success = false;
    
#if VERSIONMAC
    @autoreleasepool {
    
        NSString *name = [NSString stringWithUTF8String:(const char *)_name.c_str()];
        ExcelApplication *application = getApp(@"com.microsoft.Excel");
        
        if(application) {

            NSPredicate* libraryPredicate = [NSPredicate predicateWithFormat:@"name == %@", name];
            SBElementArray<ExcelWorkbook *> *matchingDocuments = [[[application workbooks] get] filteredArrayUsingPredicate:libraryPredicate];
            
            for(ExcelWorkbook *document in matchingDocuments) {
                
                NSURL *url = nil;
                
                /* [document file] */
                
                if(_path.length()) {
                    NSString *path = [NSString stringWithUTF8String:(const char *)_path.c_str()];
                    url = copyUrl(path);
                }
                
                if(!url) {
                    NSURL *tempUrl = temporaryDirectory();
                    url = [[tempUrl URLByAppendingPathComponent:sanitizeFileName([document name])] retain];
                }
                
                if(url) {
                    
                    [document closeSaving:ExcelSaveOptionsYes savingIn:url];
                    NSString *savePath = copyPath(url);
                    _path = (const uint8_t *)[savePath UTF8String];
                    [savePath release];
                    [url release];
                    
                    success = true;
                }
            }
        }
    }
#endif
            
    return success;
}

static bool sb_tell_excel_to_close(CUTF16String& _name, CUTF16String& _path) {

	bool success = false;

#if VERSIONWIN

	HRESULT hr = OleInitialize(NULL);

	if (SUCCEEDED(hr)) {

		COleException e;
		ExcelApplication xlApp;

		bool isAvailable = false;

		CLSID clsid;
		CLSIDFromProgID(L"Excel.Application", &clsid);

		IUnknown *pUnknown;
		HRESULT hr = GetActiveObject(clsid, NULL, (IUnknown**)&pUnknown);
		if (SUCCEEDED(hr)) {
			//there is a running instance
			// Get IDispatch interface for Automation...
			IDispatch *pDispatch;
			hr = pUnknown->QueryInterface(IID_IDispatch, (void **)&pDispatch);
			if (SUCCEEDED(hr)) {
				xlApp.AttachDispatch(pDispatch, TRUE);
				isAvailable = true;
			}
		}

		if (isAvailable) {

			xlApp.put_Visible(TRUE);

			COleVariant name((LPCTSTR)_name.c_str());
			COleVariant path((LPCTSTR)_path.c_str());

			COleVariant vtOptional((long)DISP_E_PARAMNOTFOUND, VT_ERROR);
			COleVariant vtTrue((short)TRUE);
			COleVariant vtFalse((short)FALSE);
			long xlNoChange = 1;
			COleVariant xlLocalSessionChanges((long)2);

			ExcelWorkbooks documents = xlApp.get_Workbooks();

			long count = documents.get_Count();
			for (long i = 1; i <= count; ++i) {
				COleVariant idx((long)i);
				ExcelWorkbook document = documents.get_Item(idx);
				if (document != NULL) {

					CString fullName = document.get_FullName();
					CString name = document.get_Name();

					if (name == (LPCTSTR)_name.c_str()) {

						BOOL displayAlerts = xlApp.get_DisplayAlerts();
						xlApp.put_DisplayAlerts(false);

						if (_path.length() != 0) {

							document.SaveAs(path,
								vtOptional, //FileFormat
								vtOptional, //Password
								vtOptional, //WriteResPassword
								vtOptional, //ReadOnlyRecommended
								vtOptional, //CreateBackup
								xlNoChange, //AccessMode
								xlLocalSessionChanges, //ConflictResolution
								vtOptional, //AddToMru
								vtOptional, //TextCodepage
								vtOptional, //TextVisualLayout
								vtOptional, //Local
								vtOptional);//WorkIdentity

						}
						else {
							document.Save();
							_path = (const PA_Unichar *)(const wchar_t *)fullName;
						}

						xlApp.put_DisplayAlerts(displayAlerts);

						document.Close(vtTrue, //SaveChanges
							vtOptional, //FileName
							vtFalse); //RouteWorkbook

						success = true;

					}
				}
			}

			if (0 == documents.get_Count()) {

				ExcelApplication app = documents.get_Application();
				app.Quit();
			}
		}

		OleUninitialize();
	}
#endif

	return success;
}

static bool sb_tell_word_to_close(CUTF8String& _name, CUTF8String& _path) {
    
    bool success = false;
    
#if VERSIONMAC
    @autoreleasepool {
    
        NSString *name = [NSString stringWithUTF8String:(const char *)_name.c_str()];
        WordApplication *application = getApp(@"com.microsoft.Word");
        
        if(application) {

            NSPredicate* libraryPredicate = [NSPredicate predicateWithFormat:@"name == %@", name];
            SBElementArray<WordDocument *> *matchingDocuments = [[[application documents] get] filteredArrayUsingPredicate:libraryPredicate];
            
            for(WordDocument *document in matchingDocuments) {

                NSURL *url = nil;
                
                /* [document file] */
                
                if(_path.length()) {
                    NSString *path = [NSString stringWithUTF8String:(const char *)_path.c_str()];
                    url = copyUrl(path);
                }
                
                if(!url) {
                    NSURL *tempUrl = temporaryDirectory();
                    url = [[tempUrl URLByAppendingPathComponent:sanitizeFileName([document name])] retain];
                }
                
                if(url) {
                    
                    [document closeSaving:WordSaveOptionsYes savingIn:url];
                    NSString *savePath = copyPath(url);
                    _path = (const uint8_t *)[savePath UTF8String];
                    [savePath release];
                    [url release];
                    
                    success = true;
                }
            }
        }
    }
#endif
            
    return success;
}

static bool sb_tell_word_to_close(CUTF16String& _name, CUTF16String& _path) {

	bool success = false;

#if VERSIONWIN

	HRESULT hr = OleInitialize(NULL);

	if (SUCCEEDED(hr)) {

		COleException e;
		WordApplication wdApp;

		bool isAvailable = false;

		CLSID clsid;
		CLSIDFromProgID(L"Word.Application", &clsid);

		IUnknown *pUnknown;
		HRESULT hr = GetActiveObject(clsid, NULL, (IUnknown**)&pUnknown);
		if (SUCCEEDED(hr)) {
			//there is a running instance
			// Get IDispatch interface for Automation...
			IDispatch *pDispatch;
			hr = pUnknown->QueryInterface(IID_IDispatch, (void **)&pDispatch);
			if (SUCCEEDED(hr)) {
				wdApp.AttachDispatch(pDispatch, TRUE);
				isAvailable = true;
			}
		}

		if (isAvailable) {

			wdApp.put_Visible(TRUE);

			COleVariant name((LPCTSTR)_name.c_str());
			COleVariant path((LPCTSTR)_path.c_str());

			COleVariant vtOptional((long)DISP_E_PARAMNOTFOUND, VT_ERROR);
			COleVariant wdSaveChanges((long)-1);
			COleVariant	wdOriginalDocumentFormat((long)1);
			COleVariant vtTrue((short)TRUE);

			WordDocuments documents = wdApp.get_Documents();

			long count = documents.get_Count();
			for (long i = 1; i <= count; ++i) {
				COleVariant idx((long)i);
				WordDocument document = documents.Item(idx);
				if (document != NULL) {

					CString fullName = document.get_FullName();
					CString name = document.get_Name();

					if (name == (LPCTSTR)_name.c_str()) {
					
						if (_path.length() != 0) {
							document.SaveAs(path,
								vtOptional, vtOptional, vtOptional, vtOptional,
								vtOptional, vtOptional, vtOptional, vtOptional,
								vtOptional, vtOptional, vtOptional, vtOptional,
								vtOptional, vtOptional, vtOptional);
						}
						else {
							document.Save();
							_path = (const PA_Unichar *)(const wchar_t *)fullName;
						}

						document.Close(wdSaveChanges, wdOriginalDocumentFormat, vtOptional);

						success = true;
					
					}
				}
			}
		
			if (0 == documents.get_Count()) {
			
				WordApplication app = documents.get_Application();
				app.Quit(vtOptional, vtOptional, vtOptional);
			}
		}
	
		OleUninitialize();
	}
#endif

	return success;
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- office-automation
            
			case 1 :
				office_automation(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

static office_command_t getCommand(CUTF8String& command) {
    
    if(command == (const uint8_t *)"close") {
        return office_command_close;
    }
    
    if(command == (const uint8_t *)"open") {
        return office_command_open;
    }
    
    return office_command_none;
}

static office_app_t getApp(CUTF8String& app) {

    if(app == (const uint8_t *)"excel") {
        return office_app_excel;
    }
    
    if(app == (const uint8_t *)"word") {
        return office_app_word;
    }
    
    if(app == (const uint8_t *)"outlook") {
        return office_app_outlook;
    }
    
    return office_app_none;
}

void office_automation(PA_PluginParameters params) {

    PA_ObjectRef options = PA_GetObjectParameter(params, 1);
    PA_ObjectRef status = PA_CreateObject();
    
    ob_set_b(status, L"success", false);
    
    if(options) {
        
		CUTF8String textValue, _app, _command;
		CUTF16String txtValue;
#if VERSIONMAC
		CUTF8String  _name, _path, _pass1, _pass2, _pass3, _pass4;
#else
		CUTF16String _name, _path, _pass1, _pass2, _pass3, _pass4;
#endif

		if (ob_get_s(options, L"app", &textValue)) {
			_app = textValue;
		}

        if(ob_get_s(options, L"app", &textValue)) {
            _app = textValue;
        }
        
        if(ob_get_s(options, L"command", &textValue)) {
            _command = textValue;
        }

#if VERSIONMAC
		if (ob_get_s(options, L"name", &textValue)) {
			_name = textValue;
		}
		if (ob_get_s(options, L"path", &textValue)) {
			_path = textValue;
		}
		if (ob_get_s(options, L"password", &textValue)) {
			_pass1 = textValue;//password for opening the document
			_pass2 = textValue;//password for opening the template
			_pass3 = textValue;//password for saving  the document
			_pass4 = textValue;//password for saving  the template
		}
		if (ob_get_s(options, L"templatePassword", &textValue)) {
			_pass2 = textValue;//password for opening the template
			_pass4 = textValue;//password for saving  the template
		}
		if (ob_get_s(options, L"writePassword", &textValue)) {
			_pass3 = textValue;//password for saving the document
			_pass4 = textValue;//password for saving the template
		}
		if (ob_get_s(options, L"writeTemplatePassword", &textValue)) {
			_pass4 = textValue;//password for saving the template
		}
#else
		if (ob_get_a(options, L"name", &txtValue)) {
			_name = txtValue;
		}
		if (ob_get_a(options, L"path", &txtValue)) {
			_path = txtValue;
		}
		if (ob_get_a(options, L"password", &txtValue)) {
			_pass1 = txtValue;//password for opening the document
			_pass2 = txtValue;//password for opening the template
			_pass3 = txtValue;//password for saving  the document
			_pass4 = txtValue;//password for saving  the template
		}
		if (ob_get_a(options, L"templatePassword", &txtValue)) {
			_pass2 = txtValue;//password for opening the template
			_pass4 = txtValue;//password for saving  the template
		}
		if (ob_get_a(options, L"writePassword", &txtValue)) {
			_pass3 = txtValue;//password for saving the document
			_pass4 = txtValue;//password for saving the template
		}
		if (ob_get_a(options, L"writeTemplatePassword", &txtValue)) {
			_pass4 = txtValue;//password for saving the template
		}
#endif
     
        office_command_t command = getCommand(_command);
        office_app_t app = getApp(_app);
        
        switch (app) {
            case office_app_excel:
                switch (command) {
                    case office_command_close:
                        if(sb_tell_excel_to_close(_name, _path)) {
#if VERSIONMAC
							ob_set_s(status, L"path", (const char *)_path.c_str());
#else
							ob_set_a(status, L"path", (const wchar_t *)_path.c_str());
#endif
                            ob_set_b(status, L"success", true);
                        }
                        break;
                    case office_command_open:
                        if(sb_tell_excel_to_open(_path, _pass1, _pass2)) {
#if VERSIONMAC
							ob_set_s(status, L"path", (const char *)_path.c_str());
#else
							ob_set_a(status, L"path", (const wchar_t *)_path.c_str());
#endif
                            ob_set_b(status, L"success", true);
                        }
                        break;
                        
                    default:
                        break;
                }
                break;
            case office_app_word:
                switch (command) {
                    case office_command_close:
                        if(sb_tell_word_to_close(_name, _path)) {
#if VERSIONMAC
							ob_set_s(status, L"path", (const char *)_path.c_str());
#else
							ob_set_a(status, L"path", (const wchar_t *)_path.c_str());
#endif
                            ob_set_b(status, L"success", true);
                        }
                        break;
                    case office_command_open:
                        if(sb_tell_word_to_open(_name, _path, _pass1, _pass2, _pass3, _pass4)) {
#if VERSIONMAC
                            ob_set_s(status, L"path", (const char *)_path.c_str());
#else
							ob_set_a(status, L"path", (const wchar_t *)_path.c_str());
#endif
                            ob_set_b(status, L"success", true);
                        }
                        break;
                        
                    default:
                        break;
                }
                break;
                
            default:
                break;
        }

    }
    
    PA_ReturnObject(params, status);
}
